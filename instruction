localStorageDB
========================================================
localStorageDB是一个基于localStorage的本地储存库，
通过模拟MongoDB的一些API和概念（如“集(`collection`)”和“文档(`document`)”），
使你能使用 localStorage 储存复杂数据。

Tutorial
========================================================

1.入门指南
HTML的引入:
html
<script type="text/javascript" src="/path/localStorageDB.js"></script>
Quick Start
------
插入（Insert）
向名为'players'的集合中插入一条文档：

---------------------------
javascript
localStorageDB('players').insert({"name":"Randy","sex":"male","score":20},function(err,result){
  if(!err){
    //do sth...
  } else //do sth...
})
---------------------------

查询（Query）
查询'players'集合中'name'为'Randy'的文档：
---------------------------
javascript
localStorageDB('players').query({"name":"Randy"},function(err,result){
  if(!err){
    //use result to do sth...
  } else //do sth...
})
---------------------------


查询集合中所有文档，将参数设置为空即可：
---------------------------
javascript
localStorageDB('players').query()
函数将返回一个数组类型。return Array
---------------------------

更新（Update）
为'players'集合中'name'为'Randy'的'score'增加'10':
----------------------------
javascript
localStorageDB('players').update({"name":"Randy"},{"@inc":{"score":"10"}},function(err){
  if(!err){
    //do sth...
  } else //do sth...
})
-----------------------------

如果修改器为空，则默认'@set'修改器：
------------------------------
javascript
localStorageDB('players').update({"name":"Randy"}, {"sex":"male","name":"kriss"})
-------------------------------
删除（Remove）
删除在'players'集合中'name'为'Randy'的一条文档：
-------------------------------
javascript
localStorageDB('players').remove({"name":"Randy"},function(err){
  if(!err){
    //do sth...
  } else //do sth...
})
------------------------------

如果要把整个集合删除，把参数设置为空：

------------------------------
javascript
localStorageDB('players').remove()
-----------------------------

APIs
------------------------------

####localStorageDB(collectionName)
* `collectionName`：`string`，需要操作的集合名。如果集合不存在，则自动创建。

#####.insert(newObj,callback)
* `newObj`：`JSON object`，插入的文档。
* `callback`：`function`，包含参数`err`和`result`：无错误时`err`返回`undefined`。`result`返回此次创建的文档对象。
* **系统会自动为每一条文档创建unix时间戳id——`_id`**，可通过callback中的result._id查看插入文档时所创建的id。


#####.query()
* 返回`Array`，该集合所有文档。

#####.query(matchObj,callback)
* `matchObj`：`JSON object`，匹配的文档
* `callback`：`function`，包含参数`err`和`result`：无错误时`err`返回`undefined`。`result`返回查询结果数组。

#####.update(matchObj,upsert,callback)
* `matchObj`：`JSON object`，匹配的文档
* `upsert`：`JSON object`，对象中key应为修改器类型，value为修改对象。例如：
-------------------------------------
localStorageDB('collectionA').update({"foo":"hi"},{"@set":{"bar":"hello"}},function(err){})
-------------------------------------
* `callback`：`function`，包含参数`err`：无错误时`err`返回`undefined`。

修改器类型：
- `@inc`：为目标增加（或减小）对应数值
- `@set`: 修改目标内容
- `@push`：为目标数组插入对应元素

#####.remove()
* 移除该集合所有文档
-------------------------------------
#####.remove(matchObj,callback)
* `matchObj`：`JSON object`，匹配的对应要删除的文档。
* `callback`：`function`，包含参数`err`：无错误时`err`返回`undefined`。


